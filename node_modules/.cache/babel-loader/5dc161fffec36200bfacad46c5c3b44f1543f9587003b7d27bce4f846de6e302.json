{"ast":null,"code":"// Mock API service to demonstrate async/await and API handling\n// This simulates real API calls with delays and error scenarios\n\n// Simulate network delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// Mock courses data\nconst mockCourses = [{\n  id: 1,\n  name: 'Computer Science',\n  duration: '4 years',\n  credits: 120\n}, {\n  id: 2,\n  name: 'Mathematics',\n  duration: '3 years',\n  credits: 90\n}, {\n  id: 3,\n  name: 'Physics',\n  duration: '4 years',\n  credits: 120\n}, {\n  id: 4,\n  name: 'Chemistry',\n  duration: '3 years',\n  credits: 90\n}, {\n  id: 5,\n  name: 'Biology',\n  duration: '4 years',\n  credits: 120\n}, {\n  id: 6,\n  name: 'Engineering',\n  duration: '4 years',\n  credits: 130\n}, {\n  id: 7,\n  name: 'Business Administration',\n  duration: '3 years',\n  credits: 90\n}, {\n  id: 8,\n  name: 'Economics',\n  duration: '3 years',\n  credits: 90\n}, {\n  id: 9,\n  name: 'Psychology',\n  duration: '3 years',\n  credits: 90\n}, {\n  id: 10,\n  name: 'Literature',\n  duration: '3 years',\n  credits: 90\n}, {\n  id: 11,\n  name: 'History',\n  duration: '3 years',\n  credits: 90\n}, {\n  id: 12,\n  name: 'Data Science',\n  duration: '2 years',\n  credits: 60\n}, {\n  id: 13,\n  name: 'Artificial Intelligence',\n  duration: '2 years',\n  credits: 60\n}, {\n  id: 14,\n  name: 'Cybersecurity',\n  duration: '2 years',\n  credits: 60\n}, {\n  id: 15,\n  name: 'Environmental Science',\n  duration: '4 years',\n  credits: 120\n}];\n\n// Mock API class to demonstrate various async patterns\nclass MockAPI {\n  constructor() {\n    this.requestCount = 0;\n    this.shouldFail = false; // For testing error handling\n  }\n\n  // Simulate API failure after certain number of requests (for testing)\n  setFailureMode(shouldFail) {\n    this.shouldFail = shouldFail;\n  }\n\n  // Fetch courses with async/await - demonstrates event loop understanding\n  async fetchCourses() {\n    try {\n      // Increment request counter (demonstrates state management)\n      this.requestCount++;\n\n      // Simulate network delay (demonstrates event loop and setTimeout)\n      await delay(800 + Math.random() * 400); // Random delay between 800-1200ms\n\n      // Simulate occasional API failures for error handling demonstration\n      if (this.shouldFail && this.requestCount % 5 === 0) {\n        throw new Error('API server temporarily unavailable');\n      }\n\n      // Simulate rate limiting (demonstrates error handling)\n      if (this.requestCount > 10) {\n        throw new Error('Rate limit exceeded. Please try again later.');\n      }\n\n      // Return courses with additional metadata\n      return {\n        success: true,\n        data: mockCourses.map(course => ({\n          ...course,\n          available: Math.random() > 0.1,\n          // 90% chance of being available\n          enrollmentDeadline: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()\n        })),\n        timestamp: new Date().toISOString(),\n        requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      };\n    } catch (error) {\n      // Enhanced error handling with different error types\n      console.error('API Error:', error);\n      if (error.message.includes('Rate limit')) {\n        throw new Error('Too many requests. Please wait a moment before trying again.');\n      } else if (error.message.includes('unavailable')) {\n        throw new Error('Service temporarily unavailable. Please try again in a few minutes.');\n      } else {\n        throw new Error('Failed to fetch courses. Please check your connection and try again.');\n      }\n    }\n  }\n\n  // Fetch a single course by ID (demonstrates parameterized API calls)\n  async fetchCourseById(courseId) {\n    try {\n      await delay(300 + Math.random() * 200);\n      const course = mockCourses.find(c => c.id === parseInt(courseId));\n      if (!course) {\n        throw new Error('Course not found');\n      }\n      return {\n        success: true,\n        data: course,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch course: ${error.message}`);\n    }\n  }\n\n  // Search courses (demonstrates filtering and search functionality)\n  async searchCourses(query) {\n    try {\n      await delay(200 + Math.random() * 300);\n      const filteredCourses = mockCourses.filter(course => course.name.toLowerCase().includes(query.toLowerCase()));\n      return {\n        success: true,\n        data: filteredCourses,\n        query,\n        count: filteredCourses.length,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      throw new Error(`Search failed: ${error.message}`);\n    }\n  }\n\n  // Simulate student enrollment (demonstrates POST-like operations)\n  async enrollStudent(studentData, courseId) {\n    try {\n      await delay(1000 + Math.random() * 500);\n\n      // Simulate validation errors\n      if (!studentData.name || !studentData.email) {\n        throw new Error('Student name and email are required');\n      }\n      if (!courseId) {\n        throw new Error('Course selection is required');\n      }\n\n      // Simulate successful enrollment\n      return {\n        success: true,\n        data: {\n          enrollmentId: `enroll_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          student: studentData,\n          courseId,\n          enrolledAt: new Date().toISOString(),\n          status: 'enrolled'\n        },\n        message: 'Student enrolled successfully'\n      };\n    } catch (error) {\n      throw new Error(`Enrollment failed: ${error.message}`);\n    }\n  }\n\n  // Get API statistics (demonstrates state tracking)\n  getStats() {\n    return {\n      totalRequests: this.requestCount,\n      lastRequest: new Date().toISOString(),\n      coursesCount: mockCourses.length\n    };\n  }\n}\n\n// Create and export a singleton instance\nconst api = new MockAPI();\nexport default api;\n\n// Export individual functions for convenience\nexport const fetchCourses = () => api.fetchCourses();\nexport const fetchCourseById = id => api.fetchCourseById(id);\nexport const searchCourses = query => api.searchCourses(query);\nexport const enrollStudent = (studentData, courseId) => api.enrollStudent(studentData, courseId);\nexport const getAPIStats = () => api.getStats();\nexport const setAPIFailureMode = shouldFail => api.setFailureMode(shouldFail);","map":{"version":3,"names":["delay","ms","Promise","resolve","setTimeout","mockCourses","id","name","duration","credits","MockAPI","constructor","requestCount","shouldFail","setFailureMode","fetchCourses","Math","random","Error","success","data","map","course","available","enrollmentDeadline","Date","now","toISOString","timestamp","requestId","toString","substr","error","console","message","includes","fetchCourseById","courseId","find","c","parseInt","searchCourses","query","filteredCourses","filter","toLowerCase","count","length","enrollStudent","studentData","email","enrollmentId","student","enrolledAt","status","getStats","totalRequests","lastRequest","coursesCount","api","getAPIStats","setAPIFailureMode"],"sources":["C:/Users/Sagar Nikam/Desktop/NavG_task/src/services/api.js"],"sourcesContent":["// Mock API service to demonstrate async/await and API handling\r\n// This simulates real API calls with delays and error scenarios\r\n\r\n// Simulate network delay\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Mock courses data\r\nconst mockCourses = [\r\n  { id: 1, name: 'Computer Science', duration: '4 years', credits: 120 },\r\n  { id: 2, name: 'Mathematics', duration: '3 years', credits: 90 },\r\n  { id: 3, name: 'Physics', duration: '4 years', credits: 120 },\r\n  { id: 4, name: 'Chemistry', duration: '3 years', credits: 90 },\r\n  { id: 5, name: 'Biology', duration: '4 years', credits: 120 },\r\n  { id: 6, name: 'Engineering', duration: '4 years', credits: 130 },\r\n  { id: 7, name: 'Business Administration', duration: '3 years', credits: 90 },\r\n  { id: 8, name: 'Economics', duration: '3 years', credits: 90 },\r\n  { id: 9, name: 'Psychology', duration: '3 years', credits: 90 },\r\n  { id: 10, name: 'Literature', duration: '3 years', credits: 90 },\r\n  { id: 11, name: 'History', duration: '3 years', credits: 90 },\r\n  { id: 12, name: 'Data Science', duration: '2 years', credits: 60 },\r\n  { id: 13, name: 'Artificial Intelligence', duration: '2 years', credits: 60 },\r\n  { id: 14, name: 'Cybersecurity', duration: '2 years', credits: 60 },\r\n  { id: 15, name: 'Environmental Science', duration: '4 years', credits: 120 }\r\n];\r\n\r\n// Mock API class to demonstrate various async patterns\r\nclass MockAPI {\r\n  constructor() {\r\n    this.requestCount = 0;\r\n    this.shouldFail = false; // For testing error handling\r\n  }\r\n\r\n  // Simulate API failure after certain number of requests (for testing)\r\n  setFailureMode(shouldFail) {\r\n    this.shouldFail = shouldFail;\r\n  }\r\n\r\n  // Fetch courses with async/await - demonstrates event loop understanding\r\n  async fetchCourses() {\r\n    try {\r\n      // Increment request counter (demonstrates state management)\r\n      this.requestCount++;\r\n      \r\n      // Simulate network delay (demonstrates event loop and setTimeout)\r\n      await delay(800 + Math.random() * 400); // Random delay between 800-1200ms\r\n      \r\n      // Simulate occasional API failures for error handling demonstration\r\n      if (this.shouldFail && this.requestCount % 5 === 0) {\r\n        throw new Error('API server temporarily unavailable');\r\n      }\r\n      \r\n      // Simulate rate limiting (demonstrates error handling)\r\n      if (this.requestCount > 10) {\r\n        throw new Error('Rate limit exceeded. Please try again later.');\r\n      }\r\n      \r\n      // Return courses with additional metadata\r\n      return {\r\n        success: true,\r\n        data: mockCourses.map(course => ({\r\n          ...course,\r\n          available: Math.random() > 0.1, // 90% chance of being available\r\n          enrollmentDeadline: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()\r\n        })),\r\n        timestamp: new Date().toISOString(),\r\n        requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n      };\r\n      \r\n    } catch (error) {\r\n      // Enhanced error handling with different error types\r\n      console.error('API Error:', error);\r\n      \r\n      if (error.message.includes('Rate limit')) {\r\n        throw new Error('Too many requests. Please wait a moment before trying again.');\r\n      } else if (error.message.includes('unavailable')) {\r\n        throw new Error('Service temporarily unavailable. Please try again in a few minutes.');\r\n      } else {\r\n        throw new Error('Failed to fetch courses. Please check your connection and try again.');\r\n      }\r\n    }\r\n  }\r\n\r\n  // Fetch a single course by ID (demonstrates parameterized API calls)\r\n  async fetchCourseById(courseId) {\r\n    try {\r\n      await delay(300 + Math.random() * 200);\r\n      \r\n      const course = mockCourses.find(c => c.id === parseInt(courseId));\r\n      \r\n      if (!course) {\r\n        throw new Error('Course not found');\r\n      }\r\n      \r\n      return {\r\n        success: true,\r\n        data: course,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Failed to fetch course: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Search courses (demonstrates filtering and search functionality)\r\n  async searchCourses(query) {\r\n    try {\r\n      await delay(200 + Math.random() * 300);\r\n      \r\n      const filteredCourses = mockCourses.filter(course =>\r\n        course.name.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n      \r\n      return {\r\n        success: true,\r\n        data: filteredCourses,\r\n        query,\r\n        count: filteredCourses.length,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Search failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Simulate student enrollment (demonstrates POST-like operations)\r\n  async enrollStudent(studentData, courseId) {\r\n    try {\r\n      await delay(1000 + Math.random() * 500);\r\n      \r\n      // Simulate validation errors\r\n      if (!studentData.name || !studentData.email) {\r\n        throw new Error('Student name and email are required');\r\n      }\r\n      \r\n      if (!courseId) {\r\n        throw new Error('Course selection is required');\r\n      }\r\n      \r\n      // Simulate successful enrollment\r\n      return {\r\n        success: true,\r\n        data: {\r\n          enrollmentId: `enroll_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n          student: studentData,\r\n          courseId,\r\n          enrolledAt: new Date().toISOString(),\r\n          status: 'enrolled'\r\n        },\r\n        message: 'Student enrolled successfully'\r\n      };\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Enrollment failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Get API statistics (demonstrates state tracking)\r\n  getStats() {\r\n    return {\r\n      totalRequests: this.requestCount,\r\n      lastRequest: new Date().toISOString(),\r\n      coursesCount: mockCourses.length\r\n    };\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nconst api = new MockAPI();\r\n\r\nexport default api;\r\n\r\n// Export individual functions for convenience\r\nexport const fetchCourses = () => api.fetchCourses();\r\nexport const fetchCourseById = (id) => api.fetchCourseById(id);\r\nexport const searchCourses = (query) => api.searchCourses(query);\r\nexport const enrollStudent = (studentData, courseId) => api.enrollStudent(studentData, courseId);\r\nexport const getAPIStats = () => api.getStats();\r\nexport const setAPIFailureMode = (shouldFail) => api.setFailureMode(shouldFail); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}