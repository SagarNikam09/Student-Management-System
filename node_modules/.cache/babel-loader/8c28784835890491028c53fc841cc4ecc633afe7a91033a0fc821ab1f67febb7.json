{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { fetchCourses, searchCourses } from '../services/api';\n\n// Custom hook to manage courses data\n// Demonstrates: custom hooks, async/await, error handling, loading states, memoization\nexport const useCourses = () => {\n  _s();\n  const [courses, setCourses] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [lastFetchTime, setLastFetchTime] = useState(null);\n\n  // Memoized filtered courses to prevent unnecessary recalculations\n  const filteredCourses = useMemo(() => {\n    if (!searchQuery) return courses;\n    return courses.filter(course => course.name.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [courses, searchQuery]);\n\n  // Memoized course statistics\n  const courseStats = useMemo(() => {\n    const total = courses.length;\n    const available = courses.filter(course => course.available).length;\n    const unavailable = total - available;\n\n    // Group by duration\n    const byDuration = courses.reduce((acc, course) => {\n      acc[course.duration] = (acc[course.duration] || 0) + 1;\n      return acc;\n    }, {});\n    return {\n      total,\n      available,\n      unavailable,\n      byDuration,\n      averageCredits: courses.length > 0 ? Math.round(courses.reduce((sum, course) => sum + course.credits, 0) / courses.length) : 0\n    };\n  }, [courses]);\n\n  // Fetch all courses with error handling and loading states\n  const loadCourses = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      console.log('🔄 Fetching courses...'); // Demonstrates console logging for debugging\n\n      const response = await fetchCourses();\n      if (response.success) {\n        setCourses(response.data);\n        setLastFetchTime(new Date().toISOString());\n        console.log(`✅ Loaded ${response.data.length} courses successfully`);\n      } else {\n        throw new Error('Failed to fetch courses');\n      }\n    } catch (err) {\n      console.error('❌ Error fetching courses:', err);\n      setError(err.message);\n\n      // Retry logic with exponential backoff (demonstrates advanced error handling)\n      if (err.message.includes('temporarily unavailable')) {\n        console.log('🔄 Retrying in 2 seconds...');\n        setTimeout(() => {\n          loadCourses();\n        }, 2000);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Search courses with debouncing (demonstrates performance optimization)\n  const searchCoursesDebounced = useCallback(async query => {\n    if (!query.trim()) {\n      setSearchQuery('');\n      return;\n    }\n    setSearchQuery(query);\n    setLoading(true);\n    try {\n      const response = await searchCourses(query);\n      if (response.success) {\n        setCourses(response.data);\n        console.log(`🔍 Found ${response.data.length} courses for \"${query}\"`);\n      }\n    } catch (err) {\n      console.error('❌ Search error:', err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Get course by ID (demonstrates utility functions)\n  const getCourseById = useCallback(id => {\n    return courses.find(course => course.id === parseInt(id));\n  }, [courses]);\n\n  // Get available courses only\n  const getAvailableCourses = useCallback(() => {\n    return courses.filter(course => course.available);\n  }, [courses]);\n\n  // Get courses by duration\n  const getCoursesByDuration = useCallback(duration => {\n    return courses.filter(course => course.duration === duration);\n  }, [courses]);\n\n  // Refresh courses (demonstrates manual refresh functionality)\n  const refreshCourses = useCallback(() => {\n    console.log('🔄 Manual refresh triggered');\n    loadCourses();\n  }, [loadCourses]);\n\n  // Load courses on mount\n  useEffect(() => {\n    loadCourses();\n  }, [loadCourses]);\n\n  // Auto-refresh courses every 5 minutes (demonstrates setInterval and cleanup)\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      console.log('🔄 Auto-refreshing courses...');\n      loadCourses();\n    }, 5 * 60 * 1000); // 5 minutes\n\n    // Cleanup function to prevent memory leaks\n    return () => {\n      console.log('🧹 Cleaning up auto-refresh interval');\n      clearInterval(intervalId);\n    };\n  }, [loadCourses]);\n\n  // Return memoized object to prevent unnecessary re-renders\n  return {\n    // State\n    courses: filteredCourses,\n    allCourses: courses,\n    loading,\n    error,\n    searchQuery,\n    lastFetchTime,\n    // Computed values\n    courseStats,\n    // Actions\n    loadCourses,\n    searchCourses: searchCoursesDebounced,\n    getCourseById,\n    getAvailableCourses,\n    getCoursesByDuration,\n    refreshCourses,\n    // Utility functions\n    clearError: () => setError(null),\n    clearSearch: () => setSearchQuery('')\n  };\n};\n_s(useCourses, \"2qVsXcfIazcp9rHQURLYNrq3fVU=\");","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","fetchCourses","searchCourses","useCourses","_s","courses","setCourses","loading","setLoading","error","setError","searchQuery","setSearchQuery","lastFetchTime","setLastFetchTime","filteredCourses","filter","course","name","toLowerCase","includes","courseStats","total","length","available","unavailable","byDuration","reduce","acc","duration","averageCredits","Math","round","sum","credits","loadCourses","console","log","response","success","data","Date","toISOString","Error","err","message","setTimeout","searchCoursesDebounced","query","trim","getCourseById","id","find","parseInt","getAvailableCourses","getCoursesByDuration","refreshCourses","intervalId","setInterval","clearInterval","allCourses","clearError","clearSearch"],"sources":["C:/Users/Sagar Nikam/Desktop/NavG_task/src/hooks/useCourses.js"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { fetchCourses, searchCourses } from '../services/api';\r\n\r\n// Custom hook to manage courses data\r\n// Demonstrates: custom hooks, async/await, error handling, loading states, memoization\r\nexport const useCourses = () => {\r\n  const [courses, setCourses] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [lastFetchTime, setLastFetchTime] = useState(null);\r\n\r\n  // Memoized filtered courses to prevent unnecessary recalculations\r\n  const filteredCourses = useMemo(() => {\r\n    if (!searchQuery) return courses;\r\n    \r\n    return courses.filter(course =>\r\n      course.name.toLowerCase().includes(searchQuery.toLowerCase())\r\n    );\r\n  }, [courses, searchQuery]);\r\n\r\n  // Memoized course statistics\r\n  const courseStats = useMemo(() => {\r\n    const total = courses.length;\r\n    const available = courses.filter(course => course.available).length;\r\n    const unavailable = total - available;\r\n    \r\n    // Group by duration\r\n    const byDuration = courses.reduce((acc, course) => {\r\n      acc[course.duration] = (acc[course.duration] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    return {\r\n      total,\r\n      available,\r\n      unavailable,\r\n      byDuration,\r\n      averageCredits: courses.length > 0 \r\n        ? Math.round(courses.reduce((sum, course) => sum + course.credits, 0) / courses.length)\r\n        : 0\r\n    };\r\n  }, [courses]);\r\n\r\n  // Fetch all courses with error handling and loading states\r\n  const loadCourses = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log('🔄 Fetching courses...'); // Demonstrates console logging for debugging\r\n      \r\n      const response = await fetchCourses();\r\n      \r\n      if (response.success) {\r\n        setCourses(response.data);\r\n        setLastFetchTime(new Date().toISOString());\r\n        console.log(`✅ Loaded ${response.data.length} courses successfully`);\r\n      } else {\r\n        throw new Error('Failed to fetch courses');\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.error('❌ Error fetching courses:', err);\r\n      setError(err.message);\r\n      \r\n      // Retry logic with exponential backoff (demonstrates advanced error handling)\r\n      if (err.message.includes('temporarily unavailable')) {\r\n        console.log('🔄 Retrying in 2 seconds...');\r\n        setTimeout(() => {\r\n          loadCourses();\r\n        }, 2000);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Search courses with debouncing (demonstrates performance optimization)\r\n  const searchCoursesDebounced = useCallback(async (query) => {\r\n    if (!query.trim()) {\r\n      setSearchQuery('');\r\n      return;\r\n    }\r\n\r\n    setSearchQuery(query);\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const response = await searchCourses(query);\r\n      \r\n      if (response.success) {\r\n        setCourses(response.data);\r\n        console.log(`🔍 Found ${response.data.length} courses for \"${query}\"`);\r\n      }\r\n      \r\n    } catch (err) {\r\n      console.error('❌ Search error:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Get course by ID (demonstrates utility functions)\r\n  const getCourseById = useCallback((id) => {\r\n    return courses.find(course => course.id === parseInt(id));\r\n  }, [courses]);\r\n\r\n  // Get available courses only\r\n  const getAvailableCourses = useCallback(() => {\r\n    return courses.filter(course => course.available);\r\n  }, [courses]);\r\n\r\n  // Get courses by duration\r\n  const getCoursesByDuration = useCallback((duration) => {\r\n    return courses.filter(course => course.duration === duration);\r\n  }, [courses]);\r\n\r\n  // Refresh courses (demonstrates manual refresh functionality)\r\n  const refreshCourses = useCallback(() => {\r\n    console.log('🔄 Manual refresh triggered');\r\n    loadCourses();\r\n  }, [loadCourses]);\r\n\r\n  // Load courses on mount\r\n  useEffect(() => {\r\n    loadCourses();\r\n  }, [loadCourses]);\r\n\r\n  // Auto-refresh courses every 5 minutes (demonstrates setInterval and cleanup)\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      console.log('🔄 Auto-refreshing courses...');\r\n      loadCourses();\r\n    }, 5 * 60 * 1000); // 5 minutes\r\n\r\n    // Cleanup function to prevent memory leaks\r\n    return () => {\r\n      console.log('🧹 Cleaning up auto-refresh interval');\r\n      clearInterval(intervalId);\r\n    };\r\n  }, [loadCourses]);\r\n\r\n  // Return memoized object to prevent unnecessary re-renders\r\n  return {\r\n    // State\r\n    courses: filteredCourses,\r\n    allCourses: courses,\r\n    loading,\r\n    error,\r\n    searchQuery,\r\n    lastFetchTime,\r\n    \r\n    // Computed values\r\n    courseStats,\r\n    \r\n    // Actions\r\n    loadCourses,\r\n    searchCourses: searchCoursesDebounced,\r\n    getCourseById,\r\n    getAvailableCourses,\r\n    getCoursesByDuration,\r\n    refreshCourses,\r\n    \r\n    // Utility functions\r\n    clearError: () => setError(null),\r\n    clearSearch: () => setSearchQuery('')\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}