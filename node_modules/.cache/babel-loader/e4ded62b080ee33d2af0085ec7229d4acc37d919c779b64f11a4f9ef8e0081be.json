{"ast":null,"code":"// Mock API service to demonstrate async/await and API handling\n// This simulates real API calls with delays and error scenarios\n\n// Simulate network delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// Mock courses data matching the provided API structure\nconst mockCourses = [{\n  \"id\": 1,\n  \"name\": \"HTML Basics\"\n}, {\n  \"id\": 2,\n  \"name\": \"CSS Mastery\"\n}, {\n  \"id\": 3,\n  \"name\": \"JavaScript Pro\"\n}, {\n  \"id\": 4,\n  \"name\": \"React In Depth\"\n}, {\n  \"id\": 5,\n  \"name\": \"Node.js Backend\"\n}, {\n  \"id\": 6,\n  \"name\": \"Database Design\"\n}, {\n  \"id\": 7,\n  \"name\": \"API Development\"\n}, {\n  \"id\": 8,\n  \"name\": \"DevOps Fundamentals\"\n}, {\n  \"id\": 9,\n  \"name\": \"Mobile Development\"\n}, {\n  \"id\": 10,\n  \"name\": \"Cloud Computing\"\n}, {\n  \"id\": 11,\n  \"name\": \"Machine Learning\"\n}, {\n  \"id\": 12,\n  \"name\": \"Cybersecurity\"\n}, {\n  \"id\": 13,\n  \"name\": \"UI/UX Design\"\n}, {\n  \"id\": 14,\n  \"name\": \"Project Management\"\n}, {\n  \"id\": 15,\n  \"name\": \"Agile Development\"\n}];\n\n// Mock API class to demonstrate various async patterns\nclass MockAPI {\n  constructor() {\n    this.requestCount = 0;\n    this.shouldFail = false; // For testing error handling\n  }\n\n  // Simulate API failure after certain number of requests (for testing)\n  setFailureMode(shouldFail) {\n    this.shouldFail = shouldFail;\n  }\n\n  // Fetch courses with async/await - demonstrates event loop understanding\n  // GET https://mockapi.io/courses\n  async fetchCourses() {\n    try {\n      // Increment request counter (demonstrates state management)\n      this.requestCount++;\n\n      // Simulate network delay (demonstrates event loop and setTimeout)\n      await delay(800 + Math.random() * 400); // Random delay between 800-1200ms\n\n      // Simulate occasional API failures for error handling demonstration\n      if (this.shouldFail && this.requestCount % 5 === 0) {\n        throw new Error('API server temporarily unavailable');\n      }\n\n      // Simulate rate limiting (demonstrates error handling)\n      if (this.requestCount > 10) {\n        throw new Error('Rate limit exceeded. Please try again later.');\n      }\n\n      // Return courses in the exact format specified by the API\n      return {\n        success: true,\n        data: mockCourses,\n        // Direct array response as per API specification\n        timestamp: new Date().toISOString(),\n        requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      };\n    } catch (error) {\n      // Enhanced error handling with different error types\n      console.error('API Error:', error);\n      if (error.message.includes('Rate limit')) {\n        throw new Error('Too many requests. Please wait a moment before trying again.');\n      } else if (error.message.includes('unavailable')) {\n        throw new Error('Service temporarily unavailable. Please try again in a few minutes.');\n      } else {\n        throw new Error('Failed to fetch courses. Please check your connection and try again.');\n      }\n    }\n  }\n\n  // Fetch a single course by ID (demonstrates parameterized API calls)\n  async fetchCourseById(courseId) {\n    try {\n      await delay(300 + Math.random() * 200);\n      const course = mockCourses.find(c => c.id === parseInt(courseId));\n      if (!course) {\n        throw new Error('Course not found');\n      }\n      return {\n        success: true,\n        data: course,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      throw new Error(`Failed to fetch course: ${error.message}`);\n    }\n  }\n\n  // Search courses (demonstrates filtering and search functionality)\n  async searchCourses(query) {\n    try {\n      await delay(200 + Math.random() * 300);\n      const filteredCourses = mockCourses.filter(course => course.name.toLowerCase().includes(query.toLowerCase()));\n      return {\n        success: true,\n        data: filteredCourses,\n        query,\n        count: filteredCourses.length,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      throw new Error(`Search failed: ${error.message}`);\n    }\n  }\n\n  // Simulate student enrollment (demonstrates POST-like operations)\n  async enrollStudent(studentData, courseId) {\n    try {\n      await delay(1000 + Math.random() * 500);\n\n      // Simulate validation errors\n      if (!studentData.name || !studentData.email) {\n        throw new Error('Student name and email are required');\n      }\n      if (!courseId) {\n        throw new Error('Course selection is required');\n      }\n\n      // Verify course exists\n      const course = mockCourses.find(c => c.id === parseInt(courseId));\n      if (!course) {\n        throw new Error('Selected course does not exist');\n      }\n\n      // Simulate successful enrollment\n      return {\n        success: true,\n        data: {\n          enrollmentId: `enroll_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n          student: studentData,\n          course: course,\n          courseId,\n          enrolledAt: new Date().toISOString(),\n          status: 'enrolled'\n        },\n        message: 'Student enrolled successfully'\n      };\n    } catch (error) {\n      throw new Error(`Enrollment failed: ${error.message}`);\n    }\n  }\n\n  // Get API statistics (demonstrates state tracking)\n  getStats() {\n    return {\n      totalRequests: this.requestCount,\n      lastRequest: new Date().toISOString(),\n      coursesCount: mockCourses.length\n    };\n  }\n\n  // Simulate the exact API endpoint as specified\n  // GET https://mockapi.io/courses\n  async getCoursesFromMockAPI() {\n    try {\n      console.log('🔄 Fetching courses from mockapi.io...');\n\n      // Simulate the actual API call\n      await delay(1000 + Math.random() * 500);\n\n      // Return the exact format as specified in the requirements\n      return mockCourses; // Direct array response: [{ \"id\": 1, \"name\": \"HTML Basics\" }, ...]\n    } catch (error) {\n      console.error('❌ Error fetching from mockapi.io:', error);\n      throw new Error('Failed to fetch courses from API');\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst api = new MockAPI();\nexport default api;\n\n// Export individual functions for convenience\nexport const fetchCourses = () => api.fetchCourses();\nexport const fetchCourseById = id => api.fetchCourseById(id);\nexport const searchCourses = query => api.searchCourses(query);\nexport const enrollStudent = (studentData, courseId) => api.enrollStudent(studentData, courseId);\nexport const getAPIStats = () => api.getStats();\nexport const setAPIFailureMode = shouldFail => api.setFailureMode(shouldFail);\nexport const getCoursesFromMockAPI = () => api.getCoursesFromMockAPI();","map":{"version":3,"names":["delay","ms","Promise","resolve","setTimeout","mockCourses","MockAPI","constructor","requestCount","shouldFail","setFailureMode","fetchCourses","Math","random","Error","success","data","timestamp","Date","toISOString","requestId","now","toString","substr","error","console","message","includes","fetchCourseById","courseId","course","find","c","id","parseInt","searchCourses","query","filteredCourses","filter","name","toLowerCase","count","length","enrollStudent","studentData","email","enrollmentId","student","enrolledAt","status","getStats","totalRequests","lastRequest","coursesCount","getCoursesFromMockAPI","log","api","getAPIStats","setAPIFailureMode"],"sources":["C:/Users/Sagar Nikam/Desktop/NavG_task/src/services/api.js"],"sourcesContent":["// Mock API service to demonstrate async/await and API handling\r\n// This simulates real API calls with delays and error scenarios\r\n\r\n// Simulate network delay\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Mock courses data matching the provided API structure\r\nconst mockCourses = [\r\n  { \"id\": 1, \"name\": \"HTML Basics\" },\r\n  { \"id\": 2, \"name\": \"CSS Mastery\" },\r\n  { \"id\": 3, \"name\": \"JavaScript Pro\" },\r\n  { \"id\": 4, \"name\": \"React In Depth\" },\r\n  { \"id\": 5, \"name\": \"Node.js Backend\" },\r\n  { \"id\": 6, \"name\": \"Database Design\" },\r\n  { \"id\": 7, \"name\": \"API Development\" },\r\n  { \"id\": 8, \"name\": \"DevOps Fundamentals\" },\r\n  { \"id\": 9, \"name\": \"Mobile Development\" },\r\n  { \"id\": 10, \"name\": \"Cloud Computing\" },\r\n  { \"id\": 11, \"name\": \"Machine Learning\" },\r\n  { \"id\": 12, \"name\": \"Cybersecurity\" },\r\n  { \"id\": 13, \"name\": \"UI/UX Design\" },\r\n  { \"id\": 14, \"name\": \"Project Management\" },\r\n  { \"id\": 15, \"name\": \"Agile Development\" }\r\n];\r\n\r\n// Mock API class to demonstrate various async patterns\r\nclass MockAPI {\r\n  constructor() {\r\n    this.requestCount = 0;\r\n    this.shouldFail = false; // For testing error handling\r\n  }\r\n\r\n  // Simulate API failure after certain number of requests (for testing)\r\n  setFailureMode(shouldFail) {\r\n    this.shouldFail = shouldFail;\r\n  }\r\n\r\n  // Fetch courses with async/await - demonstrates event loop understanding\r\n  // GET https://mockapi.io/courses\r\n  async fetchCourses() {\r\n    try {\r\n      // Increment request counter (demonstrates state management)\r\n      this.requestCount++;\r\n      \r\n      // Simulate network delay (demonstrates event loop and setTimeout)\r\n      await delay(800 + Math.random() * 400); // Random delay between 800-1200ms\r\n      \r\n      // Simulate occasional API failures for error handling demonstration\r\n      if (this.shouldFail && this.requestCount % 5 === 0) {\r\n        throw new Error('API server temporarily unavailable');\r\n      }\r\n      \r\n      // Simulate rate limiting (demonstrates error handling)\r\n      if (this.requestCount > 10) {\r\n        throw new Error('Rate limit exceeded. Please try again later.');\r\n      }\r\n      \r\n      // Return courses in the exact format specified by the API\r\n      return {\r\n        success: true,\r\n        data: mockCourses, // Direct array response as per API specification\r\n        timestamp: new Date().toISOString(),\r\n        requestId: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\r\n      };\r\n      \r\n    } catch (error) {\r\n      // Enhanced error handling with different error types\r\n      console.error('API Error:', error);\r\n      \r\n      if (error.message.includes('Rate limit')) {\r\n        throw new Error('Too many requests. Please wait a moment before trying again.');\r\n      } else if (error.message.includes('unavailable')) {\r\n        throw new Error('Service temporarily unavailable. Please try again in a few minutes.');\r\n      } else {\r\n        throw new Error('Failed to fetch courses. Please check your connection and try again.');\r\n      }\r\n    }\r\n  }\r\n\r\n  // Fetch a single course by ID (demonstrates parameterized API calls)\r\n  async fetchCourseById(courseId) {\r\n    try {\r\n      await delay(300 + Math.random() * 200);\r\n      \r\n      const course = mockCourses.find(c => c.id === parseInt(courseId));\r\n      \r\n      if (!course) {\r\n        throw new Error('Course not found');\r\n      }\r\n      \r\n      return {\r\n        success: true,\r\n        data: course,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Failed to fetch course: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Search courses (demonstrates filtering and search functionality)\r\n  async searchCourses(query) {\r\n    try {\r\n      await delay(200 + Math.random() * 300);\r\n      \r\n      const filteredCourses = mockCourses.filter(course =>\r\n        course.name.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n      \r\n      return {\r\n        success: true,\r\n        data: filteredCourses,\r\n        query,\r\n        count: filteredCourses.length,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Search failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Simulate student enrollment (demonstrates POST-like operations)\r\n  async enrollStudent(studentData, courseId) {\r\n    try {\r\n      await delay(1000 + Math.random() * 500);\r\n      \r\n      // Simulate validation errors\r\n      if (!studentData.name || !studentData.email) {\r\n        throw new Error('Student name and email are required');\r\n      }\r\n      \r\n      if (!courseId) {\r\n        throw new Error('Course selection is required');\r\n      }\r\n      \r\n      // Verify course exists\r\n      const course = mockCourses.find(c => c.id === parseInt(courseId));\r\n      if (!course) {\r\n        throw new Error('Selected course does not exist');\r\n      }\r\n      \r\n      // Simulate successful enrollment\r\n      return {\r\n        success: true,\r\n        data: {\r\n          enrollmentId: `enroll_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n          student: studentData,\r\n          course: course,\r\n          courseId,\r\n          enrolledAt: new Date().toISOString(),\r\n          status: 'enrolled'\r\n        },\r\n        message: 'Student enrolled successfully'\r\n      };\r\n      \r\n    } catch (error) {\r\n      throw new Error(`Enrollment failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Get API statistics (demonstrates state tracking)\r\n  getStats() {\r\n    return {\r\n      totalRequests: this.requestCount,\r\n      lastRequest: new Date().toISOString(),\r\n      coursesCount: mockCourses.length\r\n    };\r\n  }\r\n\r\n  // Simulate the exact API endpoint as specified\r\n  // GET https://mockapi.io/courses\r\n  async getCoursesFromMockAPI() {\r\n    try {\r\n      console.log('🔄 Fetching courses from mockapi.io...');\r\n      \r\n      // Simulate the actual API call\r\n      await delay(1000 + Math.random() * 500);\r\n      \r\n      // Return the exact format as specified in the requirements\r\n      return mockCourses; // Direct array response: [{ \"id\": 1, \"name\": \"HTML Basics\" }, ...]\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error fetching from mockapi.io:', error);\r\n      throw new Error('Failed to fetch courses from API');\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nconst api = new MockAPI();\r\n\r\nexport default api;\r\n\r\n// Export individual functions for convenience\r\nexport const fetchCourses = () => api.fetchCourses();\r\nexport const fetchCourseById = (id) => api.fetchCourseById(id);\r\nexport const searchCourses = (query) => api.searchCourses(query);\r\nexport const enrollStudent = (studentData, courseId) => api.enrollStudent(studentData, courseId);\r\nexport const getAPIStats = () => api.getStats();\r\nexport const setAPIFailureMode = (shouldFail) => api.setFailureMode(shouldFail);\r\nexport const getCoursesFromMockAPI = () => api.getCoursesFromMockAPI(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}